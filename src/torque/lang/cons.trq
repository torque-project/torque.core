;; -*- mode: clojure;-*-
;;   Copyright (c) Rich Hickey. All rights reserved.
;;   The use and distribution terms for this software are covered by the
;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;;   which can be found in the file epl-v10.html at the root of this distribution.
;;   By using this software in any fashion, you are agreeing to be bound by
;;   the terms of this license.
;;   You must not remove this notice, or any other, from this software.

(ns torque.lang.cons
  (:use
    [torque.lang.protocols]
    [torque.lang.boot])
  (:require
    [torque.lang.common.seq :as seq]))

(deftype Cons [^:ref first ^:ref rest meta]

  IPrintable
  (-str [this]
    (seq/pr-str "(" ")" this))

  AList

  ICloneable
  (-clone [_]
    (new Cons first rest nil))

  IWithMeta
  (-with-meta [o meta]
    (new Cons first rest meta))

  IMeta
  (-meta [o] meta)

  ISeq
  (-first [_]
    first)
  (-rest [_]
    (if (nil? rest)
      ()
      rest))

  INext
  (-next [coll]
    (if (nil? rest)
      nil
      (seq rest)))

  ICollection
  (-conj [coll o]
    (new Cons o coll meta))

  IEquiv
  (-equiv [o other]
    (seq/equiv o other))

  ISeqable
  (-seq [o] o)

  IReduce
  (-reduce [coll f]
    (seq/reduce f coll))
  (-reduce [coll f init]
    (seq/reduce f init coll)))

(def cons
  (fn* [x coll]
    (if (nil? coll)
      (new Cons x coll nil)
      (if (satisfies? ISeq coll)
        (new Cons x coll nil)
        (new Cons x (seq coll) nil)))))

