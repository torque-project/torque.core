;; -*- mode: clojure; eval: (paredit-mode 1);-*-

(ns torque.lang.string
  (:use
    [torque.lang.protocols]
    [torque.lang.boot]))

(def libc (so* "c"))
(def memcpy (import* libc memcpy))

(deftype String [data width length]

  IString

  IPrintable
  (-str [this] this)

  ISerializable
  (-bytes [o] data)

  IPointerTarget
  (-intptr [_] (-intptr data))

  ICounted
  (-count [_] length)

  IEquiv
  (-equiv [_ other]
    (if (instance? String other)
      (-equiv data (-bytes other))
      false)))

(def string?
  (fn* string? [x]
    (satisfies? IString x)))

(def string
  (fn* string [b]
    (new String b 1 (blength b))))

(def length
  (fn* [s]
    (. s length)))

(def maybe-str
  (fn* [s]
    (if s
      (if (satisfies? IPrintable s)
        (-str s)
        ;; TODO: print at least type name
        "<unprintable>")
      "nil")))

(def binary
  (fn* [& args]
    #?(:rev 
       (torque.core.builtin/binary args)
       :default
       (let* [size (loop* [i 0
                           s 0]
                     (if (< i (alength args))
                       (if (binary? (aget args i))
                         (recur (inc i) (+ s (blength (aget args i))))
                         (recur (inc i) (+ s 1)))
                       s))
              out  (make-binary size)]
         (loop* [i 0
                 p 0]
           (if (< i (alength args))
             (let* [b (aget args i)
                    s (blength b)]
               (if (binary? b)
                 (do
                   (invoke* memcpy :ptr [:ptr :ptr :sint64]
                     (+ (intptr out) p) (intptr b) s)
                   (recur (inc i) (+ p s)))
                 (do 
                   (bset out p b)
                   (recur (inc i) (inc s)))))))
         out))))

(def str
  (fn* [& args]
    (if (not (nil? args))
      (loop* [xs (-next args)
              b  (bytes (maybe-str (-first args)))]
        (if (not (nil? xs))
          (let* [x        (let* [fst (-first xs)]
                            (if (nil? fst)
                              "nil"
                              fst))
                 next-bin (binary b (bytes (maybe-str x)))]
            (recur (-next xs) next-bin))
          (string b)))
      "")))
